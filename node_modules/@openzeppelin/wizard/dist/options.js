"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withHelpers = withHelpers;
const path_1 = __importDefault(require("path"));
const infer_transpiled_1 = require("./infer-transpiled");
const upgradeableName = (n) => {
    if (n === 'Initializable') {
        return n;
    }
    else {
        return n.replace(/(Upgradeable)?(?=\.|$)/, 'Upgradeable');
    }
};
const upgradeableImport = (p) => {
    const { dir, ext, name } = path_1.default.parse(p.path);
    // Use path.posix to get forward slashes
    return {
        ...p,
        name: upgradeableName(p.name), // Contract name
        path: path_1.default.posix.format({
            ext,
            dir: dir.replace(/^@openzeppelin\/contracts/, '@openzeppelin/contracts-upgradeable'),
            name: upgradeableName(name), // Solidity file name
        }),
    };
};
function withHelpers(contract, opts = {}) {
    const contractUpgradeable = contract.upgradeable;
    const transformName = (n) => contractUpgradeable && (0, infer_transpiled_1.inferTranspiled)(n) ? upgradeableName(n.name) : n.name;
    return {
        upgradeable: contractUpgradeable,
        transformName,
        transformImport: p1 => {
            var _a, _b;
            const p2 = contractUpgradeable && (0, infer_transpiled_1.inferTranspiled)(p1) ? upgradeableImport(p1) : p1;
            return (_b = (_a = opts.transformImport) === null || _a === void 0 ? void 0 : _a.call(opts, p2)) !== null && _b !== void 0 ? _b : p2;
        },
    };
}
//# sourceMappingURL=options.js.map