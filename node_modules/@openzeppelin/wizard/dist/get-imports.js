"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImports = getImports;
const transitive_closure_1 = require("./utils/transitive-closure");
const openzeppelin_contracts_1 = __importDefault(require("../openzeppelin-contracts"));
const options_1 = require("./options");
/**
* Gets the source code for all imports of a contract, including all transitive dependencies,
* in a format compatible with the Solidity compiler input's `sources` field.
*
* Does not include the contract itself (use `printContract` for that if needed).
 *
 * @param c The contract to get imports for.
 * @returns A record of import paths to `content` that contains the source code for each contract.
 */
function getImports(c) {
    const { transformImport } = (0, options_1.withHelpers)(c);
    const result = {};
    const fileName = c.name + '.sol';
    const dependencies = {
        [fileName]: c.imports.map(i => transformImport(i).path),
        ...openzeppelin_contracts_1.default.dependencies,
    };
    const allImports = (0, transitive_closure_1.reachable)(dependencies, fileName);
    for (const importPath of allImports) {
        const source = openzeppelin_contracts_1.default.sources[importPath];
        if (source === undefined) {
            throw new Error(`Source for ${importPath} not found`);
        }
        result[importPath] = { content: source };
    }
    return result;
}
//# sourceMappingURL=get-imports.js.map